var helpers = require("../../node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
  _parcelHelpers.defineInteropFlag(exports);
  var _react = require('react');
  var _reactDefault = _parcelHelpers.interopDefault(_react);
  var _Loader = require("./Loader");
  var _LoaderDefault = _parcelHelpers.interopDefault(_Loader);
  var _reactBootstrap = require("react-bootstrap");
  var _FileContent = require("./FileContent");
  var _FileContentDefault = _parcelHelpers.interopDefault(_FileContent);
  var _jsxFileName = "/Users/lerk/workspace/pds-viewer/src/components/FolderContent.tsx";
  const FolderContent = ({path, activeKey, selectedFormat}) => {
    const [folderContent, setFolderContent] = _react.useState(undefined);
    const [error, setError] = _react.useState(false);
    const apiUrl = 'https://pds-imaging.jpl.nasa.gov/w10n' + (path === '/' ? '' : path) + '/?output=json';
    _react.useEffect(() => {
      fetch(apiUrl).then(function (response) {
        if (response.status !== 200) {
          setError(true);
          throw new Error("Bad response from server for path: '" + path + "'!");
        }
        return response.json();
      }).then(function (content) {
        setFolderContent(content);
      });
    }, []);
    if (error) {
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Alert, {
          variant: 'danger',
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 35,
            columnNumber: 13
          }
        }, "There was an error fetching data from the API!")
      );
    }
    if (!folderContent) {
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_LoaderDefault.default, {
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 42,
            columnNumber: 17
          }
        })
      );
    }
    if (!folderContent.nodes) {
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Alert, {
          variant: 'info',
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 47,
            columnNumber: 13
          }
        }, "There are no nodes!")
      );
    }
    const buildHref = node => {
      const prePathDelim = path.startsWith('/') && path !== '/' ? '' : '/';
      const pathWithDelim = path && path !== '/' ? path + '/' : '';
      return '/data' + prePathDelim + pathWithDelim + node.name;
    };
    const nodeItems = folderContent.nodes.map((node, idx) => {
      const mTime = node.attributes.find(attr => attr.name === 'mtime');
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.ListGroup.Item, {
          className: 'folder-content-item',
          key: idx,
          action: true,
          href: buildHref(node),
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 62,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("span", {
          className: 'name',
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 64,
            columnNumber: 17
          }
        }, node.name), mTime && /*#__PURE__*/_reactDefault.default.createElement("small", {
          className: 'text-muted',
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 65,
            columnNumber: 27
          }
        }, mTime.value))
      );
    });
    const isLeafWebifiable = leaf => {
      const webifiableAttr = leaf.attributes.find(a => a.name === 'webifiable');
      return (webifiableAttr && webifiableAttr.value) == true;
    };
    const nodeLeaves = folderContent.leaves.map((leaf, idx) => {
      const mTime = leaf.attributes.find(attr => attr.name === 'mtime');
      const size = leaf.attributes.find(attr => attr.name === 'size');
      const webifiable = isLeafWebifiable(leaf);
      const webifiableHref = buildHref(leaf);
      const fileViewHref = '#' + leaf.name;
      const href = webifiable ? webifiableHref : fileViewHref;
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.ListGroup.Item, {
          className: 'folder-content-item',
          key: idx,
          action: true,
          href: href,
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 85,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement("span", {
          className: 'name',
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 87,
            columnNumber: 17
          }
        }, leaf.name), /*#__PURE__*/_reactDefault.default.createElement("span", {
          className: 'details',
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 88,
            columnNumber: 17
          }
        }, size && /*#__PURE__*/_reactDefault.default.createElement("small", {
          className: 'text-muted',
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 89,
            columnNumber: 30
          }
        }, size.value + ' bytes'), mTime && /*#__PURE__*/_reactDefault.default.createElement("small", {
          className: 'text-muted',
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 90,
            columnNumber: 31
          }
        }, mTime.value)))
      );
    });
    const nodeLeafContents = folderContent.leaves.map((leaf, idx) => {
      const filePath = (path ? path + '/' : '') + leaf.name;
      const contentKey = '#' + leaf.name;
      const metadataAttr = folderContent.attributes.find(a => a.name === 'metadata');
      const webifiable = isLeafWebifiable(leaf);
      return (
        /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Tab.Pane, {
          key: idx,
          eventKey: contentKey,
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 103,
            columnNumber: 13
          }
        }, /*#__PURE__*/_reactDefault.default.createElement(_FileContentDefault.default, {
          selectedFormat: selectedFormat,
          webifiable: webifiable,
          path: filePath,
          metadata: metadataAttr && metadataAttr.value,
          __self: undefined,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 104,
            columnNumber: 17
          }
        }))
      );
    });
    return (
      /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Tab.Container, {
        mountOnEnter: true,
        id: "folder-content-tabs",
        defaultActiveKey: activeKey || '#no-selection',
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 110,
          columnNumber: 9
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Container, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 111,
          columnNumber: 13
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Row, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 112,
          columnNumber: 17
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Col, {
        sm: 4,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 113,
          columnNumber: 21
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.ListGroup, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 114,
          columnNumber: 25
        }
      }, nodeItems, nodeLeaves)), /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Col, {
        sm: 8,
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119,
          columnNumber: 21
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Tab.Content, {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 120,
          columnNumber: 25
        }
      }, /*#__PURE__*/_reactDefault.default.createElement(_reactBootstrap.Tab.Pane, {
        eventKey: "#no-selection",
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 121,
          columnNumber: 29
        }
      }, /*#__PURE__*/_reactDefault.default.createElement("p", {
        __self: undefined,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 122,
          columnNumber: 33
        }
      }, "No selection...")), nodeLeafContents)))))
    );
  };
  exports.default = FolderContent;
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
